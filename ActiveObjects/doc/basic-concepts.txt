.. :mode=rest:

==============
Basic Concepts
==============

The underlying principle behind ActiveObjects is that ever-popular catch phrase:
convention rather than configuration.  With ActiveObjects, you create the abstract Java
class interfaces using standard Java data object conventions (``get``, ``set``,
``is``, etc...) and ActiveObjects handles the wiring to the database.  In
fact, ActiveObjects will even generate the database-specific schema to correspond
with the specified Java class model.

From a developer standpoint, using ActiveObjects is as simple as the following::
    
    public interface Person extends Entity {
        public String getFirstName();
        public void setFirstName(String name);
        
        public String getLastName();
        public void setLastName(String name); 
    }
    
    // ...
    EntityManager manager = new EntityManager("jdbc:mysql://localhost/ao_test", "user", "password");
    
    Person frank = manager.create(Person.class);
    frank.setName("Frank");
    frank.setName("Smith");
    frank.save();

The code specified above is fully functional; there are no unspecified configuration files.  In 
fact, the only missing step would be to create the corresponding database schema.  ActiveObjects
can handle this step too, using a feature called migrations::

    // ...
    manager.migrate(Person.class);

This will execute DDL something like the following (assuming MySQL as in the URI above)::

    CREATE TABLE person (
        id INTEGER AUTO_INCREMENT NOT NULL,
        firstName VARCHAR(255),
        lastName VARCHAR(255),
        PRIMARY KEY (id)
    );

With migrations, you don't need to worry about making changes to your schema, or keeping
your schema in sync with your entity model in code.  Supposing you add a ``getAge():int``
method (and its corresponding setter) to the ``Person`` entity in the above example.
If the ``person`` table has already been created, it probably contains data.  It would
be ugly and painful to write scripts to generate a new version of the table, migrate the old
data over and delete the old table.  Instead of this mess, all that is necessary is another
call to the ``migrate`` method (as shown above).  This time, instead of generating
the full table from scratch, ActiveObjects will inspect the existing schema and determine that
the only necessary action is the addition of the ``age`` field.  To this end, it will
execute *only* the following DDL statement::

    ALTER TABLE person ADD COLUMN age INTEGER;

All of the data has been retained, no ugly scripts were written and the entity model in
code is once again in sync with the database schema.  This powerful functionality allows for
things such as refactoring your entity model, adding constraints and indexes and so on all
without adversely effecting your database.

Switching databases is as easy as changing the JDBC URI value in the EntityManager constructor.  
There is never any need to be concerned about the ins and outs of database specifics or
to write any SQL by hand.  In fact, you can use ActiveObjects and take full advantage of
database functionality without ever once opening a database client or even understanding the
basics of SQL or RDBMS.

In fact, any Java developer can use ActiveObjects, even if they have no experience whatsoever
in databases or their underlying concepts.  The framework is designed so that it "feels" natural to any
Java developer, not requiring any knowledge of relational databases.

