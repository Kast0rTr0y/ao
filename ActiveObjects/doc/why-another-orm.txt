.. :mode=rest:

================
Why Another ORM?
================

Possibily the most important question to answer regarding ActiveObjects is
to explain: why another ORM?  The Java ORM framework genre is completely
dominated by the JBoss framework, Hibernate.  In fact, Hibernate is so widely
used and respected that it's even been ported to .NET (NHibernate).  So, if
there's already a widely respected, widely used and mature framework which
seems to satisfy all important use-cases, why throw another into the mix?

The answer really comes back to complexity.  Hibernate is an incredibly
complex framework.  Granted, it is complex mainly because it is powerful, but
sometimes - most of the time even - the required use-case is very simple and
doesn't require all of Hibernate's compexities.  ActiveObjects is designed from
the ground up to be as easy to use as possible, with a bare minimum of
configuration.  In fact, to date ActiveObjects doesn't even have a single hook
which takes an XML configuration file (or any other format).  Any and all
configuration is either guessed from code, or easily set in code through the
discrete use of annotations.

There is an increasing trend in the industry towards "convention over
configuration."  This is most reflected in RAD frameworks such as Ruby on Rails.
Much of the accepted industry pundits agree that writing 20 lines of code is
much easier than 20 lines of code and 150 lines of XML configuration (go
figure).  ActiveObjects follows this practice as much as possible in its 
implementation.  In fact, much of the inspiration for the framework comes
from Rails's excelent ActiveRecord ORM (hence, the name).  The exception
to this inspiration would be that ActiveObjects does *not*
impose English pluralization rules by default (though it is capable of such
functionality when it is desirable).

In fact, ActiveObjects strives so hard to be a simple and easy-to-use
persistence framework that some functionality (such as distributed transactions)
has been simply omitted.  The reasoning behind this is that 99% of use-cases
do not call for such extreme measures.  If your project does require such
complex behavior within your ORM, you should be using Hibernate.  It's as
simple as that.  **ActiveObjects is not intended to supplant Hibernate.**
Rather, its goal is to be an easier and lighter alternative for the many
common scenarios which do not call for all of Hibernate's awsome power.

In short, ActiveObjects attempts to make database development simple
and fun again.  It abstracts the developer from the intricacies of the database
schema and the particulars of how to access it.  Using ActiveObjects, the only
thing the developer needs to worry about is the high-level concept of
object-oriented design and data encapsulation.
